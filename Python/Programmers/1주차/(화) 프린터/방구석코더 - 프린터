알고리즘 : 현재 위치의 대기문서보다 중요도가 높은 문서가 대기 목록이 더 길다면(=뒤에 있다면) 제일 뒤로 미뤄둠
           정렬 X 각 문서마다 인덱스(순서)가 매겨져있음
           
           접근법 : 맨앞(=0)부터 뒤(index>0) 에 중요도가 높은 문서가 있다면 맨 뒤로 보냄
                    위 과정을 마치면 바로 다음 순서(=1)에서 위 과정을 반복 
                    n-1번째 까지 이 과정을 반복                                         (0.32ms)
           
           ※ 시간이 오래걸림   
           
           => 맨앞부터 가장 중요도가 높은 문서(전) 까지 통째로 뒤에 가져다 붙이는 방법 + (0.45ms)
           ex)   [ 2, 1, 3, 2]  =>  [ 2, 1 ] 을  [ 3, 2 ] 뒤에 붙임 => [ 3, 2, 2, 1 ]   이 과정을 반복 
                                                                                    until . (중요도 (최대==최소))
           
조건 :
    현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.
    인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다. 
    location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.

입출력 예
    중요도	    |  요청 문서 위치  	|  return
[2, 1, 3, 2]   |   	  2         	|    1
[1,1,9,1,1,1]  |    	0	          |     5





from collections import defaultdict     # 사전에 값의 갯수를 담아 카운팅
def solution(data, lo):
    parse = defaultdict(int)          # 기본값이 0 으로 주어지는 딕셔너리
    finder = (lo,data[lo])        # 찾을 인덱스와 값
    for i,x in enumerate(data):
        parse[x]+=1               # { 값 : (갯수) }
        data[i] = (i,x)           # 배열에 인덱스를 추가
    i = 0
    while True:
        if not parse:break          #  값이 존재하지 않으면 break
        if data[i][1]==max(parse):  # 가장 중요한 문서가 나오면 개수-1
            parse[data[i][1]]-=1
            if parse[data[i][1]]==0:    # 해당 중요도의 문서가 존재X => 제거
                parse.pop(data[i][1])
            i+=1                        # 비교를 시작할 인덱스 증가
        else:
            data.append(data.pop(i))
    return data.index(finder)+1

해설                 (값 : 개수)
  (1)  [2,1,3,2]   =>    { 3 : 1 , 2 : 2 , 1 : 1}     =>  딕셔너리에 {값:개수} 기입
  
  (2)  data = [[0,2] , [1,1] , [2,3] , [3,2]]       =>  data 리스트에 인덱스를 추가

    (while 문 진입)  (i==0)
  (3)  data[i][1]
          [2]  == max(parse) (=3)   
             (조건성립 X)
        =>  data .append()  추가   <-  data.pop(i)   <=  맨앞에 [2]를빼서 뒤에 추가
      or   
         [3] == max(parse) (=3) 
             (조건성립 O)
         =>  parse[data[i][1]]-=1     { 3 : 1(-1) } => { 3 : 0 } => 제거  parse = { 2 : 2 , 1 : 1 }  
                      [3]
         max(parse) == 2            이 과정을 반복
  
          
                            수정 후 시간이 더 소요되었지만 데이터 증가에 따라 시간소요는 반전 될 것으로 생각됨
########################################################### + 시간문제 수정  
def solution(pri, lo):
    mx=max(pri);mn=min(pri)             # 종료 조건을 위해 (최대,최소) 를 미리 구함
    for i,x in enumerate(pri):          # 위와 마찬가지로 인덱스 부여
        pri[i]=[x,i]
    lo = pri[lo];i = 0                  # 찾을 인덱스와 값 lo 에 저장
    data =[]                            # 새로운 배열을 만들어 중요도가 높은 순서대로 뽑아낸것을 담음
    while True:
        if mx == mn:        # 최대==최소 만족시 남은 배열 새 배열에 옮김
            data+=pri
            break
        for idx,x in enumerate(pri):
            if x[0]==mx:              # 가장 중요한 문서일때  (새 배열에 값 저장) (기존배열에서 열외(=제거))
                data += [x]
                if idx==len(pri)-1:
                    pri = pri[:-1]
                else:pri = pri[idx+1:]+pri[:idx]
                i+=1;mx=max(pri)                  # 남은 배열중 최대값 찾기
                mx = mx[0]
                break

    return data.index(lo)+1           # enumerate 0 기준이기 때문에 +1
    
 
과정은 맨 위 알고리즘 설명에 기입
